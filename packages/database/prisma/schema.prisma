generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model Campaign {
  id                String            @id @default(cuid())
  name              String
  description       String?

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  maps              Map[]
  factions          Faction[]
  factionAlliances  FactionAlliance[]
  factionConflicts  FactionConflict[]
  factionTrades     FactionTrade[]
}


model Coordinates {
  id        String   @id @default(cuid())
  x         Int
  y         Int
  width     Int
  height    Int

  location  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  factionId String?
  faction   Faction? @relation(fields: [factionId], references: [id], onDelete: Cascade)
}


model Faction {
  id                  String              @id @default(cuid())
  name                String
  race                String
  color               String
  description         String?

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  coordinates         Coordinates[]
  descriptors         Seed[]
  conflictsAggressor  FactionConflict[]   @relation("aggressor")
  conflictsDefender   FactionConflict[]   @relation("defender")
  alliancesA          FactionAlliance[]   @relation("partyA")
  alliancesB          FactionAlliance[]   @relation("partyB")
  tradeA              FactionTrade[]      @relation("partyA")
  tradeB              FactionTrade[]      @relation("partyB")

  campaignId          String
  campaign            Campaign            @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([name, race])
}


model FactionAlliance {
  id         String   @id @default(cuid())
  reason     String?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  seedId     String
  seed       Seed     @relation(fields: [seedId], references: [id])

  partyAId   String
  partyA     Faction  @relation("partyA", fields: [partyAId], references: [id])

  partyBId   String
  partyB     Faction  @relation("partyB", fields: [partyBId], references: [id])
}


model FactionConflict {
  id           String   @id @default(cuid())
  reason       String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  campaignId   String
  campaign     Campaign @relation(fields: [campaignId], references: [id])

  seedId       String
  seed         Seed     @relation(fields: [seedId], references: [id])

  aggressorId  String
  aggressor    Faction  @relation("aggressor", fields: [aggressorId], references: [id])

  defenderId   String
  defender     Faction  @relation("defender", fields: [defenderId], references: [id])
}


model FactionTrade {
  id         String   @id @default(cuid())

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  seedAId    String
  seedA      Seed     @relation("seedA", fields: [seedAId], references: [id])

  seedBId    String
  seedB      Seed     @relation("seedB", fields: [seedBId], references: [id])

  partyAId   String
  partyA     Faction  @relation("partyA", fields: [partyAId], references: [id])

  partyBId   String
  partyB     Faction  @relation("partyB", fields: [partyBId], references: [id])
}


model Map {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  campaignId  String
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model Seed {
  id                String           @id @default(cuid())
  type              String
  value             String

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  userId            String
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  factions          Faction[]
  factionConflicts  FactionConflict[]
  factionAlliances  FactionAlliance[]
  factionTradeA     FactionTrade[]   @relation("seedA")
  factionTradeB     FactionTrade[]   @relation("seedB")
}


model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  token     String   @unique
  userAgent String?
  ipAddress String?
  
  createdAt DateTime @default(now())
  expiresAt DateTime
  lastUsed  DateTime @default(now())
  
  @@index([userId])
  @@index([token])
}

model User {
  id           String @id @default(cuid())
  name         String
  email        String @unique
  passwordHash String

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  campaigns    Campaign[]
  sessions     Session[]
  seeds        Seed[]
}